<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JVM内存相关的监控指标</title>
    <url>/2025/02/09/jvm-nei-cun-xiang-guan-de-jian-kong-zhi-biao/posts/undefined/</url>
    <content><![CDATA[<p><img src="/images/jvm-memory.PNG" alt="jvm内存图片"></p>
<h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><blockquote>
<p>JVM Heap代表存放Java Objects的Heap</p>
</blockquote>
<h3 id="Non-Heap"><a href="#Non-Heap" class="headerlink" title="Non-Heap"></a>Non-Heap</h3><h4 id="1-SpringBoot的JVM-metrics埋点代码"><a href="#1-SpringBoot的JVM-metrics埋点代码" class="headerlink" title="1. SpringBoot的JVM metrics埋点代码"></a>1. SpringBoot的JVM metrics埋点代码</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 通过io.micrometer.core引入了JVMMemoryuMetrics这个埋点实现</span></span><br><span class="line"><span class="keyword">for</span> (MemoryPoolMXBean memoryPoolBean : ManagementFactory.getPlatformMXBeans(MemoryPoolMXBean.class)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">area</span> <span class="operator">=</span> MemoryType.HEAP.equals(memoryPoolBean.getType()) ? <span class="string">&quot;heap&quot;</span> : <span class="string">&quot;nonheap&quot;</span>;</span><br><span class="line">    Iterable&lt;Tag&gt; tagsWithId = Tags.concat(tags, <span class="string">&quot;id&quot;</span>, memoryPoolBean.getName(), <span class="string">&quot;area&quot;</span>, area);</span><br><span class="line"></span><br><span class="line">    Gauge.builder(<span class="string">&quot;jvm.memory.used&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getUsed))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The amount of used memory&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line"></span><br><span class="line">    Gauge</span><br><span class="line">        .builder(<span class="string">&quot;jvm.memory.committed&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getCommitted))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The amount of memory in bytes that is committed for the Java virtual machine to use&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line"></span><br><span class="line">    Gauge.builder(<span class="string">&quot;jvm.memory.max&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getMax))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The maximum amount of memory in bytes that can be used for memory management&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MemoryPoolMXBean接口的实现类是sun.management.MemoryPoolImpl，该类通过native method得到JVM提供的内存使用信息</span></span><br><span class="line"><span class="comment">// Native VM support</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> MemoryUsage <span class="title function_">getUsage0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure>

<h4 id="2-JVM本身的代码"><a href="#2-JVM本身的代码" class="headerlink" title="2. JVM本身的代码"></a>2. JVM本身的代码</h4><blockquote>
<p>设置-XX:NativeMemoryTracking&#x3D;summary或者details，然后使用jcmd去查看</p>
</blockquote>
<ul>
<li>CodeCache</li>
<li>Metaspace</li>
<li>CompressedClassSpace</li>
<li>DirectBuffer</li>
<li>Thread Stacks</li>
</ul>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-JVM里used内存很低，但是容器物理内存占用很高"><a href="#1-JVM里used内存很低，但是容器物理内存占用很高" class="headerlink" title="1. JVM里used内存很低，但是容器物理内存占用很高"></a>1. JVM里used内存很低，但是容器物理内存占用很高</h4><p>因为k8s不允许使用交换分区，所以这里不用考虑外存和内存的交换关系。</p>
<p>JVM申请内存的时候，会预先使用<strong>pretouch</strong>的方式声明去告知OS，期望使用多少size的内存，由于物理内存的分配（内核本身的虚拟内存-物理内存管理）时惰性的，所以声明要使用多少size，不代表物理内存就立刻分配多少。</p>
<p>比如JavaHeap声明了1G的内存需要使用，但实际使用过程中，物理内存也是逐步被分配的，由于JavaHeap的内存被JVM的GC管理，当Heap满时，JVM的GC会内部释放内存空间，很明显，GC的过程不会让OS感知，不会去释放物理内存，假如FGC后，JavaHeap实际used的内存（常驻在JavaHeap）中只有200M，但此时容器物理内存很可能是1G多。</p>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>监控</tag>
        <tag>内存</tag>
      </tags>
  </entry>
  <entry>
    <title>JFR</title>
    <url>/2025/02/09/jfr/posts/undefined/</url>
    <content><![CDATA[<h3 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h3><ul>
<li><a href="https://www.zhihu.com/column/c_1264859821121355776">hashcon JFR 全解</a></li>
</ul>
<h3 id="JVM-启动"><a href="#JVM-启动" class="headerlink" title="JVM 启动"></a>JVM 启动</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Java - XX:StartFlightRecording=delay=6s,disk=<span class="literal">true</span>,dumponexit=<span class="literal">true</span>,filename=/Users/wulei/tmp/recording.jfr,maxsize=1024m,maxage=<span class="number">1d</span>,settings=/Users/wulei/IdeaProjects/personal/op-lei4play/op-samples/jfr/lei-<span class="keyword">default</span>.jfc,path-to-gc-roots=<span class="literal">true</span> -XX:FlightRecorderOptions=repository=/Users/wulei/tmp,stackdepth=<span class="number">64</span> test.Main</span><br></pre></td></tr></table></figure>



<p><code>-XX:StartFlightRecording</code>有这个参数就会启用 JFR 记录，以下是相关的参数</p>
<table>
<thead>
<tr>
<th align="center">配置 key</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">delay</td>
<td align="left">0</td>
<td align="left">延迟多久后启动 JFR 记录，支持带单位配置， 例如 delay&#x3D;60s（秒）， delay&#x3D;20m（分钟）， delay&#x3D;1h（小时）， delay&#x3D;1d（天），不带单位就是秒， 0 就是没有延迟直接开始记录。一般为了避免框架初始化等影响，我们会延迟 1 分钟开始记录（例如 Spring cloud 应用，可以看下日志中应用启动耗时，来决定下这个时间</td>
</tr>
<tr>
<td align="center">disk</td>
<td align="left">true</td>
<td align="left">是否写入磁盘，global buffer 满了之后，是直接丢弃还是写入磁盘文件</td>
</tr>
<tr>
<td align="center">dumponexit</td>
<td align="left">false</td>
<td align="left">程序退出时，是否要 dump 出 。jfr 文件</td>
</tr>
<tr>
<td align="center">duration</td>
<td align="left">0</td>
<td align="left">JFR 记录持续时间，同样支持单位配置，不带单位就是秒，0 代表不限制持续时间，一直记录</td>
</tr>
<tr>
<td align="center">filename</td>
<td align="left">启动目录&#x2F;hotspot-pid-26732-id-1-2020_03_12_10_07_22.jfr，pid 后面就是 pid， id 后面是第几个 JFR 记录，可以启动多个 JFR 记录。最后就是时间</td>
<td align="left">dump 的输出文件</td>
</tr>
<tr>
<td align="center">name</td>
<td align="left">无</td>
<td align="left">记录名称，由于可以启动多个 JFR 记录，这个名称用于区分，否则只能看到一个记录 id，不好区分</td>
</tr>
<tr>
<td align="center">maxage</td>
<td align="left">0</td>
<td align="left">这个参数只有在 disk 为 true 的情况下才有效。最大文件记录保存时间，就是 global buffer 满了需要刷入本地临时目录下保存，这些文件最多保留多久的。也可以通过单位配置，没有单位就是秒，默认是 0，就是不限制</td>
</tr>
<tr>
<td align="center">maxsize</td>
<td align="left">250MB</td>
<td align="left">这个参数只有在 disk 为 true 的情况下才有效。最大文件大小，支持单位配置， 不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。设置为 0 代表不限制大小**。虽然官网说默认就是 0，但是实际用的时候，不设置会有提示**： No limit specified， using maxsize&#x3D;250MB as default。 注意，这个配置不能小于后面将会提到的 maxchunksize 这个参数</td>
</tr>
<tr>
<td align="center">path-to-gc-roots</td>
<td align="left">false</td>
<td align="left">是否记录 GC 根节点到活动对象的路径，一般不打开这个，首先这个在我个人定位问题的时候，很难用到，只要你的编程习惯好。还有就是打开这个，性能损耗比较大，会导致 FullGC 一般是在怀疑有内存泄漏的时候热启动这种采集，并且通过产生对象堆栈无法定位的时候，动态打开即可。一般通过产生这个对象的堆栈就能定位，如果定位不到，怀疑有其他引用，例如 ThreadLocal 没有释放这样的，可以在 dump 的时候采集 gc roots</td>
</tr>
<tr>
<td align="center">settings</td>
<td align="left">default.jfc</td>
<td align="left">位于 <code>$JAVA_HOME/lib/jfr/default.jfc</code>采集 Event 的详细配置，采集的每个 Event 都有自己的详细配置。另一个 JDK 自带的配置是 profile.jfc，位于 <code>$JAVA_HOME/lib/jfr/profile.jfc</code>如果需要指定自己的配置，这里可以设置为全路径的配置文件，类似 <code>settings=/Users/wulei/tmp/lei-default.jfc</code></td>
</tr>
</tbody></table>
<p><strong><code>-XX:FlightRecorderOptions</code></strong> 相关的参数</p>
<table>
<thead>
<tr>
<th align="left">配置 key</th>
<th align="left">默认值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">allow_threadbuffers_to_disk</td>
<td align="left">false</td>
<td align="left">是否允许 在 thread buffer 线程阻塞的时候，直接将 thread buffer 的内容写入文件。默认不启用，一般没必要开启这个参数，只要你设置的参数让 global buffer 大小合理不至于刷盘很慢，就行了</td>
</tr>
<tr>
<td align="left">globalbuffersize</td>
<td align="left">如果不设置，根据设置的 memorysize 自动计算得出</td>
<td align="left">单个 global buffer 的大小，一般通过 memorysize 设置，不建议自己设置</td>
</tr>
<tr>
<td align="left">maxchunksize</td>
<td align="left">12M</td>
<td align="left">存入磁盘的每个临时文件的大小。默认为 12MB，不能小于 1M。可以用单位配置，不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。注意这个大小最好不要比 memorySize 小，更不能比 globalbuffersize 小，否则会导致性能下降</td>
</tr>
<tr>
<td align="left">memorysize</td>
<td align="left">10M</td>
<td align="left">FR 的 global buffer 占用的整体内存大小，一般通过设置这个参数，numglobalbuffers 还有 globalbuffersize 会被自动计算出。可以用单位配置，不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB</td>
</tr>
<tr>
<td align="left">numglobalbuffers</td>
<td align="left">如果不设置，根据设置的 memorysize 自动计算得出</td>
<td align="left">global buffer 的个数，一般通过 memorysize 设置，不建议自己设置</td>
</tr>
<tr>
<td align="left">old-object-queue-size</td>
<td align="left">256</td>
<td align="left">对于 Profiling 中的 Old Object Sample 事件，记录多少个 Old Object，这个配置并不是越大越好。记录是怎么记录的，会在后面的各种 Event 介绍里面详细介绍。我的建议是，一般应用 256 就够，时间跨度大的，例如 maxage 保存了一周以上的，可以翻倍</td>
</tr>
<tr>
<td align="left">repository</td>
<td align="left">等同于 -Djava.io.tmpdir 指定的目录</td>
<td align="left">JFR 保存到磁盘的临时记录的位置</td>
</tr>
<tr>
<td align="left">retransform</td>
<td align="left">true</td>
<td align="left">是否通过 JVMTI 转换 JFR 相关 Event 类，如果设置为 false，则只在 Event 类加载的时候添加相应的 Java Instrumentation，这个一般不用改，这点内存 metaspace 还是足够的</td>
</tr>
<tr>
<td align="left">samplethreads</td>
<td align="left">true</td>
<td align="left">这个是是否开启线程采集的状态位配置，只有这个配置为 true，并且在 Event 配置中开启线程相关的采集（这个后面会提到），才会采集这些事件</td>
</tr>
<tr>
<td align="left">stackdepth</td>
<td align="left">64</td>
<td align="left">采集事件堆栈深度，有些 Event 会采集堆栈，这个堆栈采集的深度，统一由这个配置指定。注意这个值不能设置过大，如果你采集的 Event 种类很多，堆栈深度大很影响性能。比如你用的是 default.jfc 配置的采集，堆栈深度 64 基本上就是不影响性能的极限了。你可以自定义采集某些事件，增加堆栈深度</td>
</tr>
<tr>
<td align="left">threadbuffersize</td>
<td align="left">8KB</td>
<td align="left">threadBuffer 大小，最好不要修改这个，如果增大，那么随着你的线程数增多，内存占用会增大。过小的话，刷入 global buffer 的次数就会变多。8KB 就是经验中最合适的</td>
</tr>
</tbody></table>
<h3 id="jcmd-命令启动"><a href="#jcmd-命令启动" class="headerlink" title="jcmd 命令启动"></a>jcmd 命令启动</h3><ul>
<li><strong><code>jcmd &lt;pid&gt; JFR.start</code></strong> 启动 JFR 记录，参数和<code>-XX:StartFlightRecording</code>一模一样，请参考上面的表格。但是注意这里不再是逗号分割，而是空格示例，代表启动一个名称为 profile_online， 最多保留一天，最大保留 1G 的本地文件记录</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jcmd 21 JFR.start name=profile_online maxage=1d maxsize=1g</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>jcmd &lt;pid&gt; JFR.stop</code></strong> 停止 JFR 记录，需要传入名称，例如如果要停止上面打开的，则执行：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">jcmd 21 JFR.stop name=profile_online</span><br></pre></td></tr></table></figure>

<ul>
<li><strong><code>jcmd &lt;pid&gt; JFR.check</code></strong> 查看当前正在执行的 JFR 记录</li>
<li><strong><code>jcmd &lt;pid&gt; JFR.configure</code></strong> 如果不传入参数，则是查看当前配置，传入参数就是修改配置。配置与-XX:FlightRecorderOptions 的一模一样。请参考上面的表格 示例</li>
<li><strong><code>jcmd &lt;pid&gt; JFR.dump</code></strong> 生成 jfr 文件</li>
</ul>
<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">默认值</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="left">name</td>
<td align="left">无</td>
<td align="left">指定要查看的 JFR 记录名称</td>
</tr>
<tr>
<td align="left">filename</td>
<td align="left">无</td>
<td align="left">指定文件输出位置</td>
</tr>
<tr>
<td align="left">maxage</td>
<td align="left">0</td>
<td align="left">dump 最多的时间范围的文件，可以通过单位配置，没有单位就是秒，默认是 0，就是不限制</td>
</tr>
<tr>
<td align="left">maxsize</td>
<td align="left">0</td>
<td align="left">dump 最大文件大小，支持单位配置， 不带单位是字节，m 或者 M 代表 MB，g 或者 G 代表 GB。设置为 0 代表不限制大小</td>
</tr>
<tr>
<td align="left">begin</td>
<td align="left">无</td>
<td align="left">dump 开始位置， 可以这么配置：09:00， 21:35:00， 2018-06-03T18:12:56.827Z， 2018-06-03T20:13:46.832， -10m， -3h， or -1d</td>
</tr>
<tr>
<td align="left">end</td>
<td align="left">无</td>
<td align="left">dump 结束位置，可以这么配置： 09:00， 21:35:00， 2018-06-03T18:12:56.827Z， 2018-06-03T20:13:46.832， -10m， -3h， or -1d （STRING， no default value）</td>
</tr>
<tr>
<td align="left">path-to-gc-roots</td>
<td align="left">false</td>
<td align="left">是否记录 GC 根节点到活动对象的路径，一般不记录，dump 的时候打开这个肯定会触发一次 fullGC，对线上应用有影响。最好参考之前对于 JFR 启动记录参数的这个参数的描述，考虑是否有必要</td>
</tr>
</tbody></table>
<h3 id="jfr-配置文件"><a href="#jfr-配置文件" class="headerlink" title="jfr 配置文件"></a>jfr 配置文件</h3><ul>
<li>openJdk 11.0.22</li>
</ul>
<p> <a href="/files/default.jfc">default.jfc</a> </p>
<p> <a href="/files/profile.jfc">profile.jfc</a> </p>
<ul>
<li>优化后的配置文件，基于 openJdk 11.2.22 default.jfr，根据👇🏻JFR Event 中的建议对于某些事件进行了关闭或者调整</li>
</ul>
<p> <a href="/files/lei-default.jfc">lei-default.jfc</a> </p>
<h3 id="JFR-Event"><a href="#JFR-Event" class="headerlink" title="JFR Event"></a>JFR Event</h3><ul>
<li><p><a href="https://zhuanlan.zhihu.com/p/124242959">EVENT-1</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/126709861">EVENT-2</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/158592899">EVENT-3</a></p>
</li>
<li><p><a href="https://zhuanlan.zhihu.com/p/158592899">JIT相关jfr事件</a></p>
</li>
</ul>
<p><img src="https://rq3nt70g815.feishu.cn/space/api/box/stream/download/asynccode/?code=MGQ5ZTQ4M2E5NTExOTI1MmQ2N2QyYjM2MTEyZjcxZDFfMk5FVW5iMXFUWXdjS1J5c2xXU21YOWJJZnBqT290QTZfVG9rZW46RldvTmIwOG1lbzBHRFd4U3pqcmNUYWdabmJiXzE3MzkwODE2OTc6MTczOTA4NTI5N19WNA" alt="img"></p>
]]></content>
      <categories>
        <category>JFR</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>监控</tag>
        <tag>JFR</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程异常处理</title>
    <url>/2025/02/09/duo-xian-cheng-yi-chang-chu-li/posts/undefined/</url>
    <content><![CDATA[<blockquote>
<p> 多线程场景下，如果没有显示的捕获异常并处理，那么异常会输出到 System.err 中，导致异常信息丢失</p>
</blockquote>
<h3 id="异常被吞噬的例子"><a href="#异常被吞噬的例子" class="headerlink" title="异常被吞噬的例子"></a>异常被吞噬的例子</h3><ul>
<li>新起线程中抛出异常</li>
</ul>
<blockquote>
<p>由于是新启动的线程，此异常并不会抛到父线程或者调用方上，导致异常被没了- - </p>
</blockquote>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;这是一个异常!&quot;</span>);</span><br><span class="line">&#125;).start();</span><br></pre></td></tr></table></figure>

<ul>
<li>线程池中抛出的异常</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Executors.newFixedThreadPool(<span class="number">1</span>)</span><br><span class="line">        .execute(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;线程池中的异常!&quot;</span>);</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote>
<p>针对上面出现的异常吞噬的例子，有以下解决方案</p>
</blockquote>
<ul>
<li><p>Try catch 显示处理异常</p>
</li>
<li><p>指定<code> Thread.UncaughtExceptionHandler</code></p>
<ul>
<li><p>线程处理</p>
</li>
<li><p>thread.setUncaughtExceptionHandler</p>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.<span class="type">UncaughtExceptionHandler</span> <span class="variable">uncaughtExceptionHandler</span> <span class="operator">=</span> (t, e) -&gt; log.error(<span class="string">&quot;[catch error]thread -&gt; &#123;&#125;, e -&gt; &#123;&#125;&quot;</span>, t, e);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;[catch]这是一个异常!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">thread.setUncaughtExceptionHandler(uncaughtExceptionHandler);</span><br><span class="line">thread.start();</span><br></pre></td></tr></table></figure>

</li>
<li><p>线程池处理</p>
</li>
<li><p>new ThreadFactoryBuilder().setUncaughtExceptionHandler  线程工厂中设置</p>
</li>
<li><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Thread.<span class="type">UncaughtExceptionHandler</span> <span class="variable">uncaughtExceptionHandler</span> <span class="operator">=</span> (t, e) -&gt; log.error(<span class="string">&quot;[catch error]thread -&gt; &#123;&#125;, e -&gt; &#123;&#125;&quot;</span>, t, e);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">thread</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;[catch]这是一个异常!&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="type">ThreadPoolExecutor</span> <span class="variable">threadPoolExecutor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ThreadPoolExecutor</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>, TimeUnit.SECONDS</span><br><span class="line">        , <span class="keyword">new</span> <span class="title class_">ArrayBlockingQueue</span>&lt;&gt;(<span class="number">1000</span>)</span><br><span class="line">        , <span class="keyword">new</span> <span class="title class_">ThreadFactoryBuilder</span>().setUncaughtExceptionHandler(uncaughtExceptionHandler).build());</span><br><span class="line">threadPoolExecutor.execute(() -&gt; &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;[catch]线程池中的异常!&quot;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
<p>Hold on…..有人的地方就不存在信任这一说- -</p>
<h3 id="兜底方案"><a href="#兜底方案" class="headerlink" title="兜底方案"></a>兜底方案</h3><blockquote>
<p>上面的解决方案是没问题的，但是但是但是，某些开发者可能没有这个意识或者忘记了，导致异常还是被吞噬了</p>
</blockquote>
<p>既然未捕获的异常最终会输出到 <code>System.err</code> 那么重新设置系统的 err 处理，把信息输出到日志系统中。下面这个是兜底方案，会存在部分的不合理，但是为了不丢异常信息还是可以容忍的，日常开发中发现此类异常，需要定位到对应的业务代码，用上面提供的解决方案完善代码；毕竟这只是一个兜底的方案，而不是常规方案</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Stderr</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Logger</span> <span class="variable">logErr</span> <span class="operator">=</span> LoggerFactory.getLogger(<span class="string">&quot;[UnCatchError]&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PrintStream</span> <span class="variable">STDERR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintStream</span>(System.err) &#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(String x)</span> &#123;</span><br><span class="line">            logErr.error(x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">println</span><span class="params">(Object x)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + x);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">boolean</span> b)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + b);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">char</span> c)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + c);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">long</span> l)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + l);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">float</span> f)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + f);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(<span class="type">double</span> d)</span> &#123;</span><br><span class="line">            logErr.error(<span class="string">&quot;&quot;</span> + d);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">print</span><span class="params">(String s)</span> &#123;</span><br><span class="line">            logErr.error(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.setErr(STDERR);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>JAVA</category>
      </categories>
      <tags>
        <tag>JAVA</tag>
        <tag>多线程</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Gateway</title>
    <url>/2025/02/09/spring-cloud-gateway/posts/undefined/</url>
    <content><![CDATA[<h2 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h2><ol>
<li>GATEWAY_ORIGINAL_REQUEST_URL_ATTR</li>
</ol>
<ul>
<li>记录原始的url请求</li>
<li>错误重试时可以用原始URI重试</li>
<li>可以记录完整的请求转换链路</li>
<li>故障分析时可以知道请求的来源</li>
<li>在路由重写时需要更新此属性</li>
</ul>
<ol start="2">
<li>GATEWAY_REQUEST_URL_ATTR</li>
</ol>
<ul>
<li>存储请求将要转发的目标URL</li>
<li>后续的过滤器和路由可以通过这个属性知道请求要被转发到哪里</li>
<li>在路由重写时需要更新此属性</li>
</ul>
<ol start="3">
<li>PRESERVE_HOST_HEADER_ATTRIBUTE</li>
</ol>
<ul>
<li>控制是否保留原始请求的 Host 头</li>
<li>true: 转发请求时会保留客户端的原始 Host header</li>
<li>false: 会使用目标服务的 Host</li>
<li>使用场景：假设自定义的过滤器修改了host属性，如果没有开启此配置，那么后续的处理可能影响此属性，这时候需要开启此配置</li>
</ul>
<h2 id="重要过滤器"><a href="#重要过滤器" class="headerlink" title="重要过滤器"></a>重要过滤器</h2><ol>
<li><p>RetryGatewayFilterFactory</p>
<blockquote>
<p>重试过滤器</p>
</blockquote>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- name: Retry #重试策略:目前只对提供者下线导致的连接异常重试，需持续观察异常情况</span><br><span class="line">  args: </span><br><span class="line">    retries: <span class="number">1</span></span><br><span class="line">    series: #不对http状态来判断是否进行重试</span><br><span class="line">    exceptions: io.netty.channel.AbstractChannel$AnnotatedConnectException</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>网关</category>
      </categories>
      <tags>
        <tag>网关</tag>
        <tag>spring cloud gateway</tag>
        <tag>spring cloud</tag>
      </tags>
  </entry>
  <entry>
    <title>JVM重要参数</title>
    <url>/2025/02/09/jvm-chong-yao-can-shu/posts/undefined/</url>
    <content><![CDATA[<h2 id="常规启动配置参数"><a href="#常规启动配置参数" class="headerlink" title="常规启动配置参数"></a>常规启动配置参数</h2><table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">说明</th>
<th align="left">备注</th>
</tr>
</thead>
<tbody><tr>
<td align="left">-XX:+PrintFlagsFinal</td>
<td align="left">启动时打印出所有JVM参数</td>
<td align="left"></td>
</tr>
<tr>
<td align="left">-XX:+HeapDumpOnOutOfMemoryError-XX:HeapDumpPath&#x3D;&#x2F;path&#x2F;to&#x2F;heap.hprof-XX:+ExitOnOutOfMemoryError</td>
<td align="left">开启OOM时堆转储指定dump文件位置发生 OOM 时强制 JVM 立即退出</td>
<td align="left">！！dump hprof文件时要求内存比较大，这块后续要再找更好的方案</td>
</tr>
<tr>
<td align="left">-Xlog:gc*:file&#x3D;gc.log::filecount&#x3D;5,filesize&#x3D;20M</td>
<td align="left">JDK 9+ 的新版 GC 日志参数-Xlog:  gc*                    # 记录所有gc相关日志  :file&#x3D;gc.log          # 输出到gc.log文件  :                           # 空的tag过滤器  :filecount&#x3D;5,         # 最多保留5个文件  filesize&#x3D;20M          # 每个文件最大20MB</td>
<td align="left">等价  jdk8           -verbose:gc        -Xloggc:&#x2F;path&#x2F;to&#x2F;gc.log        -XX:+PrintGCDetails        -XX:+PrintGCDateStamps        -XX:+PrintGCTimeStamps        -XX:+UseGCLogFileRotation        -XX:NumberOfGCLogFiles&#x3D;5        -XX:GCLogFileSize&#x3D;20M</td>
</tr>
<tr>
<td align="left">-XX:StartFlightRecording&#x3D;delay&#x3D;1s,disk&#x3D;true,dumponexit&#x3D;true,filename&#x3D;.&#x2F;logs&#x2F;recording.jfr,maxsize&#x3D;1024m,maxage&#x3D;1d,path-to-gc-roots&#x3D;true-XX:FlightRecorderOptions&#x3D;stackdepth&#x3D;128</td>
<td align="left">jfr启动参数，具体参考 <a href="https://rq3nt70g815.feishu.cn/wiki/CtdmwY0yPiUkgKkXidecur63nVc">JFR</a></td>
<td align="left"></td>
</tr>
<tr>
<td align="left">-Xlog:safepoint&#x3D;debug:file&#x3D;.&#x2F;logs&#x2F;safepoint.log:utctime,level,tags:filecount&#x3D;50,filesize&#x3D;100M</td>
<td align="left">safepoint</td>
<td align="left"></td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JVM</category>
      </categories>
      <tags>
        <tag>JVM</tag>
        <tag>参数</tag>
      </tags>
  </entry>
</search>
