<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WL&#39;s blog</title>
  
  
  <link href="https://taeyang0126.github.io/atom.xml" rel="self"/>
  
  <link href="https://taeyang0126.github.io/"/>
  <updated>2025-02-09T06:07:16.832Z</updated>
  <id>https://taeyang0126.github.io/</id>
  
  <author>
    <name>WU LEI</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JVM内存相关的监控指标</title>
    <link href="https://taeyang0126.github.io/2025/02/09/jvm-nei-cun-xiang-guan-de-jian-kong-zhi-biao/posts/undefined/"/>
    <id>https://taeyang0126.github.io/2025/02/09/jvm-nei-cun-xiang-guan-de-jian-kong-zhi-biao/posts/undefined/</id>
    <published>2025-02-09T05:53:30.000Z</published>
    <updated>2025-02-09T06:07:16.832Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/../images/jvm-memory.PNG" alt="jvm内存图片"></p><h3 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h3><blockquote><p>JVM Heap代表存放Java Objects的Heap</p></blockquote><h3 id="Non-Heap"><a href="#Non-Heap" class="headerlink" title="Non-Heap"></a>Non-Heap</h3><h4 id="1-SpringBoot的JVM-metrics埋点代码"><a href="#1-SpringBoot的JVM-metrics埋点代码" class="headerlink" title="1. SpringBoot的JVM metrics埋点代码"></a>1. SpringBoot的JVM metrics埋点代码</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 通过io.micrometer.core引入了JVMMemoryuMetrics这个埋点实现</span></span><br><span class="line"><span class="keyword">for</span> (MemoryPoolMXBean memoryPoolBean : ManagementFactory.getPlatformMXBeans(MemoryPoolMXBean.class)) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">area</span> <span class="operator">=</span> MemoryType.HEAP.equals(memoryPoolBean.getType()) ? <span class="string">&quot;heap&quot;</span> : <span class="string">&quot;nonheap&quot;</span>;</span><br><span class="line">    Iterable&lt;Tag&gt; tagsWithId = Tags.concat(tags, <span class="string">&quot;id&quot;</span>, memoryPoolBean.getName(), <span class="string">&quot;area&quot;</span>, area);</span><br><span class="line"></span><br><span class="line">    Gauge.builder(<span class="string">&quot;jvm.memory.used&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getUsed))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The amount of used memory&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line"></span><br><span class="line">    Gauge</span><br><span class="line">        .builder(<span class="string">&quot;jvm.memory.committed&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getCommitted))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The amount of memory in bytes that is committed for the Java virtual machine to use&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line"></span><br><span class="line">    Gauge.builder(<span class="string">&quot;jvm.memory.max&quot;</span>, memoryPoolBean, (mem) -&gt; getUsageValue(mem, MemoryUsage::getMax))</span><br><span class="line">        .tags(tagsWithId)</span><br><span class="line">        .description(<span class="string">&quot;The maximum amount of memory in bytes that can be used for memory management&quot;</span>)</span><br><span class="line">        .baseUnit(BaseUnits.BYTES)</span><br><span class="line">        .register(registry);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MemoryPoolMXBean接口的实现类是sun.management.MemoryPoolImpl，该类通过native method得到JVM提供的内存使用信息</span></span><br><span class="line"><span class="comment">// Native VM support</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">native</span> MemoryUsage <span class="title function_">getUsage0</span><span class="params">()</span>;</span><br></pre></td></tr></table></figure><h4 id="2-JVM本身的代码"><a href="#2-JVM本身的代码" class="headerlink" title="2. JVM本身的代码"></a>2. JVM本身的代码</h4><blockquote><p>设置-XX:NativeMemoryTracking&#x3D;summary或者details，然后使用jcmd去查看</p></blockquote><ul><li>CodeCache</li><li>Metaspace</li><li>CompressedClassSpace</li><li>DirectBuffer</li><li>Thread Stacks</li></ul><h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><h4 id="1-JVM里used内存很低，但是容器物理内存占用很高"><a href="#1-JVM里used内存很低，但是容器物理内存占用很高" class="headerlink" title="1. JVM里used内存很低，但是容器物理内存占用很高"></a>1. JVM里used内存很低，但是容器物理内存占用很高</h4><p>因为k8s不允许使用交换分区，所以这里不用考虑外存和内存的交换关系。</p><p>JVM申请内存的时候，会预先使用<strong>pretouch</strong>的方式声明去告知OS，期望使用多少size的内存，由于物理内存的分配（内核本身的虚拟内存-物理内存管理）时惰性的，所以声明要使用多少size，不代表物理内存就立刻分配多少。</p><p>比如JavaHeap声明了1G的内存需要使用，但实际使用过程中，物理内存也是逐步被分配的，由于JavaHeap的内存被JVM的GC管理，当Heap满时，JVM的GC会内部释放内存空间，很明显，GC的过程不会让OS感知，不会去释放物理内存，假如FGC后，JavaHeap实际used的内存（常驻在JavaHeap）中只有200M，但此时容器物理内存很可能是1G多。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;img src=&quot;/../images/jvm-memory.PNG&quot; alt=&quot;jvm内存图片&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Heap&quot;&gt;&lt;a href=&quot;#Heap&quot; class=&quot;headerlink&quot; title=&quot;Heap&quot;&gt;&lt;/a&gt;Heap&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;JVM Heap代表存放Java Objects的Heap&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="JVM" scheme="https://taeyang0126.github.io/categories/JVM/"/>
    
    
    <category term="JVM" scheme="https://taeyang0126.github.io/tags/JVM/"/>
    
    <category term="监控" scheme="https://taeyang0126.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="内存" scheme="https://taeyang0126.github.io/tags/%E5%86%85%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Gateway</title>
    <link href="https://taeyang0126.github.io/2025/02/09/spring-cloud-gateway/posts/undefined/"/>
    <id>https://taeyang0126.github.io/2025/02/09/spring-cloud-gateway/posts/undefined/</id>
    <published>2025-02-09T05:25:22.000Z</published>
    <updated>2025-02-09T06:07:08.187Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重要属性"><a href="#重要属性" class="headerlink" title="重要属性"></a>重要属性</h2><ol><li>GATEWAY_ORIGINAL_REQUEST_URL_ATTR</li></ol><ul><li>记录原始的url请求</li><li>错误重试时可以用原始URI重试</li><li>可以记录完整的请求转换链路</li><li>故障分析时可以知道请求的来源</li><li>在路由重写时需要更新此属性</li></ul><ol start="2"><li>GATEWAY_REQUEST_URL_ATTR</li></ol><ul><li>存储请求将要转发的目标URL</li><li>后续的过滤器和路由可以通过这个属性知道请求要被转发到哪里</li><li>在路由重写时需要更新此属性</li></ul><ol start="3"><li>PRESERVE_HOST_HEADER_ATTRIBUTE</li></ol><ul><li>控制是否保留原始请求的 Host 头</li><li>true: 转发请求时会保留客户端的原始 Host header</li><li>false: 会使用目标服务的 Host</li><li>使用场景：假设自定义的过滤器修改了host属性，如果没有开启此配置，那么后续的处理可能影响此属性，这时候需要开启此配置</li></ul><h2 id="重要过滤器"><a href="#重要过滤器" class="headerlink" title="重要过滤器"></a>重要过滤器</h2><ol><li><p>RetryGatewayFilterFactory</p><blockquote><p>重试过滤器</p></blockquote> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- name: Retry #重试策略:目前只对提供者下线导致的连接异常重试，需持续观察异常情况</span><br><span class="line">  args: </span><br><span class="line">    retries: <span class="number">1</span></span><br><span class="line">    series: #不对http状态来判断是否进行重试</span><br><span class="line">    exceptions: io.netty.channel.AbstractChannel$AnnotatedConnectException</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;重要属性&quot;&gt;&lt;a href=&quot;#重要属性&quot; class=&quot;headerlink&quot; title=&quot;重要属性&quot;&gt;&lt;/a&gt;重要属性&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;GATEWAY_ORIGINAL_REQUEST_URL_ATTR&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;记录原始的url请求&lt;/li&gt;
&lt;li&gt;错误重试时可以用原始URI重试&lt;/li&gt;
&lt;li&gt;可以记录完整的请求转换链路&lt;/li&gt;
&lt;li&gt;故障分析时可以知道请求的来源&lt;/li&gt;
&lt;li&gt;在路由重写时需要更新此属性&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="网关" scheme="https://taeyang0126.github.io/categories/%E7%BD%91%E5%85%B3/"/>
    
    
    <category term="网关" scheme="https://taeyang0126.github.io/tags/%E7%BD%91%E5%85%B3/"/>
    
    <category term="spring cloud gateway" scheme="https://taeyang0126.github.io/tags/spring-cloud-gateway/"/>
    
    <category term="spring cloud" scheme="https://taeyang0126.github.io/tags/spring-cloud/"/>
    
  </entry>
  
</feed>
