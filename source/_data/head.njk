<script>
document.addEventListener('DOMContentLoaded', () => {
    const canvas = document.createElement('canvas');
    const ctx = canvas.getContext('2d');
    let particles = [];
    let mouseX = 0;
    let mouseY = 0;
    let frame = 0;
    let isScrolling = false;
    let scrollTimeout;
    
    // 性能检测
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    const isLowEndDevice = navigator.hardwareConcurrency <= 4;
    
    // 根据设备性能调整参数
    const PARTICLE_LIFE = isLowEndDevice ? 15 : 20;
    const FRAME_INTERVAL = isMobile ? 5 : 3;  // 移动端降低粒子产生频率
    const MAX_PARTICLES = isMobile ? 30 : 50;  // 限制最大粒子数
    
    canvas.style.position = 'fixed';
    canvas.style.pointerEvents = 'none';
    canvas.style.top = '0';
    canvas.style.left = '0';
    canvas.style.zIndex = '999999';
    document.body.appendChild(canvas);

    // 使用节流函数处理resize
    let resizeTimeout;
    function resizeCanvas() {
        if (!resizeTimeout) {
            resizeTimeout = setTimeout(() => {
                canvas.width = window.innerWidth;
                canvas.height = window.innerHeight;
                resizeTimeout = null;
            }, 100);
        }
    }
    resizeCanvas();
    window.addEventListener('resize', resizeCanvas);

    class Particle {
        constructor(x, y) {
            this.x = x;
            this.y = y;
            this.size = Math.random() * 2 + 1;  // 稍微减小粒子大小
            this.speedX = Math.random() * 1.5 - 0.75;  // 降低速度范围
            this.speedY = Math.random() * 1.5 - 0.75;
            this.life = PARTICLE_LIFE;
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;
            this.life--;
        }

        draw() {
            ctx.fillStyle = `rgba(0, 115, 170, ${this.life/PARTICLE_LIFE})`;
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2);
            ctx.fill();
        }
    }

    // 使用节流函数处理鼠标移动
    let mouseMoveTimeout;
    document.addEventListener('mousemove', (e) => {
        if (!mouseMoveTimeout && !isScrolling) {
            mouseMoveTimeout = setTimeout(() => {
                mouseX = e.clientX;
                mouseY = e.clientY;
                mouseMoveTimeout = null;
            }, 16); // 约60fps
        }
    });

    // 处理滚动时的暂停
    document.addEventListener('scroll', () => {
        isScrolling = true;
        clearTimeout(scrollTimeout);
        scrollTimeout = setTimeout(() => {
            isScrolling = false;
        }, 150);
    });

    // 优化的动画循环
    function animate() {
        if (!document.hidden && !isScrolling) {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            frame++;
            
            // 控制粒子产生
            if (frame % FRAME_INTERVAL === 0 && particles.length < MAX_PARTICLES) {
                particles.push(new Particle(mouseX, mouseY));
            }
            
            // 使用倒序循环提高性能
            for(let i = particles.length - 1; i >= 0; i--) {
                particles[i].update();
                particles[i].draw();
                
                if(particles[i].life <= 0) {
                    particles.splice(i, 1);
                }
            }
        }
        requestAnimationFrame(animate);
    }
    
    animate();
});
</script>
<script src="/js/ribbon.js"></script>
